openapi: 3.0.3
info:
  title: REST API for TodoList
  description: This is the REST API endpoints definition for TodoList project
  version: 0.1.0
  contact:
    email: yuriydyachuk91@gmail.com
servers:
  - url: 'http://localhost:3010/api/v1'
    description: Local server

paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: 'User login'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  default: ivan@example.com
                password:
                  type: string
                  default: password
              required:
                - email
                - password
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Login'

  /auth/register:
    post:
      tags:
        - Auth
      summary: 'User Registration'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  default: Ivan
                email:
                  type: string
                  default: ivan@example.com
                password:
                  type: string
                  default: password
              required:
                - name
                - email
                - password
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Register'


  /profile/logout:
    post:
      tags:
        - Auth
      summary: 'User logout'
      responses:
        204:
          description: ''
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Logout'

# TODOS #

  /todos:
    get:
      tags:
        - Todos
      summary: 'Get todos'
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Todos'

    post:
      tags:
        - Todos
      summary: 'Creating new todo'
      requestBody:
        description: ''
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: Test
                description:
                  type: string
                  default: Description value
                tags[0]:
                  type: array
                  items:
                    type: string
                    default: 1
                    description: 'ID tag'
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/CreateTodo'

  /todos/{id}:
    get:
      tags:
        - Todos
      summary: 'Get todos by Id with tags'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/ShowTodo'


# TAGS #

  /tags:
    get:
      tags:
        - Tags
      summary: 'Get tags'
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/Tag'

    post:
      tags:
        - Tags
      summary: 'Creating new tag'
      requestBody:
        description: ''
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: Test
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/CreateTag'

  /tags/{id}:
    get:
      tags:
        - Tags
      summary: 'Show tags by ID with todos.'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/ShowTag'


# COMPONENTS #

components:
  schemas:


    # AUTH COMPONENTS #

    Login:
      type: object
      properties:
        ok:
          type: boolean
        token:
          type: object
          properties:
            type:
              type: string
              example: Bearer
            value:
              type: string
              example: Bearer 6|vIymXOFGXo27pvl9mpYUptLAmEEakyb8FqzFeAzY
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Ivan
        email:
          type: string
          example: ivan@example.com

    Register:
      type: object
      properties:
        status:
          type: boolean
        data:
          type: string
          example: "Successfully registration."

    Logout:
      type: object
      properties:
        status:
          type: boolean
        data:
          type: string
          example: "Successfully logout"


    # Service components #


    Todos:
      type: object
      properties:
        id:
          type: integer
          example: 8
        name:
          type: string
          example: Prosacco
        description:
          type: string
          example: Description value
        author:
          type: string
          example: Alex
          description: User name
        tags:
          type: object
          properties:
            id:
              type: integer
              default: 12
            name:
              type: string
              example: BMW
        links:
          type: array
          items:
            type: object
            properties:
              total:
                type: integer
                example: 10
              lastPage:
                type: integer
                example: 2
              perPage:
                type: integer
                example: 10
              currentPage:
                type: integer
                example: 1


    CreateTodo:
      type: object
      properties:
        id:
          type: integer
          default: 2
        name:
          type: string
          default: Test
        tags[0]:
          type: array
          items:
            type: string
            example: 1
            description: ID tag
        description:
          type: string
          default: Description value


    ShowTodo:
      type: object
      properties:
        id:
          type: integer
          example: 8
        name:
          type: string
          example: Prosacco
        description:
          type: string
          example: Description value
        author:
          type: string
          example: Alex
          description: User name
        tags:
          type: object
          properties:
            id:
              type: integer
              default: 12
            name:
              type: string
              example: BMW


    Tag:
      type: object
      properties:
        id:
          type: integer
          example: 8
        name:
          type: string
          example: Prosacco
        todos:
          type: object
          properties:
            id:
              type: integer
              example: 8
            name:
              type: string
              example: Prosacco
            description:
              type: string
              example: Description value
            author:
              type: string
              example: Alex
              description: User name
        links:
          type: array
          items:
            type: object
            properties:
              total:
                type: integer
                example: 10
              lastPage:
                type: integer
                example: 2
              perPage:
                type: integer
                example: 10
              currentPage:
                type: integer
                example: 1

    CreateTag:
      type: object
      properties:
        id:
          type: integer
          default: 2
        name:
          type: string
          default: Test

    ShowTag:
      type: object
      properties:
        id:
          type: integer
          example: 8
        name:
          type: string
          example: Prosacco
        todos:
          type: object
          properties:
            id:
              type: integer
              example: 8
            name:
              type: string
              example: Prosacco
            description:
              type: string
              example: Description value
            author:
              type: string
              example: Alex
              description: User name

# CANSEL COMPONENTS #

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []